/* Generated By:JJTree&JavaCC: Do not edit this line. Eg2.java */
/** An Arithmetic Grammar. */
//package Parser;
import symbols.*;

public class Eg2/*@bgen(jjtree)*/implements Eg2TreeConstants, Eg2Constants {/*@bgen(jjtree)*/
  protected JJTEg2State jjtree = new JJTEg2State();Env curEnv = null;       // current symbol table
        /** Main entry point. */
        public static void main(String args[])
        {
                System.out.println("Reading from standard input...");
            Eg2 t = new Eg2(System.in);
            try
            {
              ASTStart n = t.Start();
              n.dump("");
              System.out.println("Thank you.");
            } catch (Exception e)
            {
              System.out.println("Oops.");
              System.out.println(e.getMessage());
              e.printStackTrace();
            }
        }

/** Main production. */
  final public ASTStart Start() throws ParseException {
                    /*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
                curEnv = new Env(null);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
          StructDeclaration();
          break;
        default:
          jj_la1[0] = jj_gen;
          if (jj_2_1(3)) {
            FunctionDeclarator();
          } else if (jj_2_2(3)) {
            UniversalDeclarator();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRUCT:
        case VARIABLE_TYPE:
        case CONST:
        case VOID:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** ************Declarations*************** .*/

/** array initializer. */
  final public void ArrayInitializer() throws ParseException {
                           /*@bgen(jjtree) ArrayInitializer */
  ASTArrayInitializer jjtn000 = new ASTArrayInitializer(JJTARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_2;
        }
        jj_consume_token(41);
        Expression();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void UniversalDeclarator() throws ParseException {
 /*@bgen(jjtree) UniversalDeclarator */
        ASTUniversalDeclarator jjtn000 = new ASTUniversalDeclarator(JJTUNIVERSALDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = null;
        String id;
        Type type;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      t = jj_consume_token(VARIABLE_TYPE);
      id = MyID();
                jjtn000.setName(t.image);
                if (curEnv.contains(id))
                        {if (true) throw new ParseException("Redifine: "+ id);}
                String s = t.image;
                if (s.compareTo("int") == 0)
                        type = Type.Int;
                else if (s.compareTo("bool") == 0)
                        type = Type.Bool;
                else if (s.compareTo("real") == 0)
                        type = Type.Real;
                else if (s.compareTo("char") == 0)
                        type = Type.Char;
                else
                        {if (true) throw new ParseException("Unknow type");}
                curEnv.put(id, type);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNMENT_EQUAL_OPERATOR:
      case 42:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGNMENT_EQUAL_OPERATOR:
          jj_consume_token(ASSIGNMENT_EQUAL_OPERATOR);
          Expression();
                        if ((type == Type.Bool) && (jjtn000.typeRight != Type.Bool))
                                {if (true) throw new ParseException("Error type of op: = /" + type.name + " " + jjtn000.typeRight.name);}
                        if ((type != Type.Bool) && (jjtn000.typeRight == Type.Bool))
                                {if (true) throw new ParseException("Error type of op: = /" + type.name + " " + jjtn000.typeRight.name);}
                        if ((type == Type.Char) && (jjtn000.typeRight == Type.Real))
                                {if (true) throw new ParseException("Error type of op: = /" + type.name + " " + jjtn000.typeRight.name);}
                        if ((type == Type.Int) && (jjtn000.typeRight == Type.Real))
                                {if (true) throw new ParseException("Error type of op: = /" + type.name + " " + jjtn000.typeRight.name);}
          break;
        case 42:
          jj_consume_token(42);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            jj_consume_token(INTEGER_LITERAL);
            break;
          default:
            jj_la1[4] = jj_gen;
            ;
          }
          jj_consume_token(43);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGNMENT_EQUAL_OPERATOR:
            jj_consume_token(ASSIGNMENT_EQUAL_OPERATOR);
            jj_consume_token(44);
            ArrayInitializer();
            jj_consume_token(45);
            break;
          default:
            jj_la1[5] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[7] = jj_gen;
        ;
      }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        jj_consume_token(41);
        id = MyID();
                        if (curEnv.contains(id))
                                {if (true) throw new ParseException("Redifine: "+ id);}
                        curEnv.put(id, type);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGNMENT_EQUAL_OPERATOR:
        case 42:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGNMENT_EQUAL_OPERATOR:
            jj_consume_token(ASSIGNMENT_EQUAL_OPERATOR);
            Expression();
                        if ((type == Type.Bool) && (jjtn000.typeRight != Type.Bool))
                                {if (true) throw new ParseException("Error type of op: = /" + type.name + " " + jjtn000.typeRight.name);}
                        if ((type != Type.Bool) && (jjtn000.typeRight == Type.Bool))
                                {if (true) throw new ParseException("Error type of op: = /" + type.name + " " + jjtn000.typeRight.name);}
                        if ((type == Type.Char) && (jjtn000.typeRight == Type.Real))
                                {if (true) throw new ParseException("Error type of op: = /" + type.name + " " + jjtn000.typeRight.name);}
                        if ((type == Type.Int) && (jjtn000.typeRight == Type.Real))
                                {if (true) throw new ParseException("Error type of op: = /" + type.name + " " + jjtn000.typeRight.name);}
            break;
          case 42:
            jj_consume_token(42);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case INTEGER_LITERAL:
              jj_consume_token(INTEGER_LITERAL);
              break;
            default:
              jj_la1[9] = jj_gen;
              ;
            }
            jj_consume_token(43);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case ASSIGNMENT_EQUAL_OPERATOR:
              jj_consume_token(ASSIGNMENT_EQUAL_OPERATOR);
              jj_consume_token(44);
              ArrayInitializer();
              jj_consume_token(45);
              break;
            default:
              jj_la1[10] = jj_gen;
              ;
            }
            break;
          default:
            jj_la1[11] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[12] = jj_gen;
          ;
        }
      }
      jj_consume_token(46);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** struct declaration. */
  final public void StructDeclaration() throws ParseException {
 /*@bgen(jjtree) StructDeclaration */
        ASTStructDeclaration jjtn000 = new ASTStructDeclaration(JJTSTRUCTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t = null;
        String id;
    try {
      t = jj_consume_token(STRUCT);
      id = MyID();
                if (curEnv.contains(id))
                        {if (true) throw new ParseException("Redifine: "+ id);}
                curEnv.put(id, new Type(t.image, true));
      StructBody();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** struct body. */
  final public void StructBody() throws ParseException {
 /*@bgen(jjtree) StructBody */
        ASTStructBody jjtn000 = new ASTStructBody(JJTSTRUCTBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Env savedEnv = curEnv;
        curEnv = new Env(curEnv);
    try {
      jj_consume_token(44);
      StructDeclarations();
      jj_consume_token(45);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                curEnv = savedEnv;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** struct declarations. */
  final public void StructDeclarations() throws ParseException {
                             /*@bgen(jjtree) StructDeclarations */
  ASTStructDeclarations jjtn000 = new ASTStructDeclarations(JJTSTRUCTDECLARATIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VARIABLE_TYPE:
        case CONST:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_4;
        }
        StructParameter();
      }
    } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

/** struct parameter. */
  final public void StructParameter() throws ParseException {
                          /*@bgen(jjtree) StructParameter */
  ASTStructParameter jjtn000 = new ASTStructParameter(JJTSTRUCTPARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UniversalDeclarator();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** function declarator. */
  final public void FunctionDeclarator() throws ParseException {
 /*@bgen(jjtree) FunctionDeclarator */
        ASTFunctionDeclarator jjtn000 = new ASTFunctionDeclarator(JJTFUNCTIONDECLARATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String id;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VOID:
        t = jj_consume_token(VOID);
        break;
      case VARIABLE_TYPE:
        t = jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      id = MyID();
                jjtn000.setType(t.image);
                jjtn000.setName(id);
                jjtn000.genInter();
                if (curEnv.contains(id))
                        {if (true) throw new ParseException("Redifine: "+ id);}
                curEnv.put(id, new Type(t.image, true));
                Env savedEnv = curEnv;
                curEnv = new Env(curEnv);
      jj_consume_token(47);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_TYPE:
      case CONST:
        FunctionParameterList();
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      jj_consume_token(48);
                jjtn000.writeReturn();
      FunctionBody();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                curEnv = savedEnv;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** function parameter list. */
  final public void FunctionParameterList() throws ParseException {
                                /*@bgen(jjtree) FunctionParameterList */
  ASTFunctionParameterList jjtn000 = new ASTFunctionParameterList(JJTFUNCTIONPARAMETERLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      FunctionParameter();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 41:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_5;
        }
        jj_consume_token(41);
        FunctionParameter();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** function parameter. */
  final public void FunctionParameter() throws ParseException {
 /*@bgen(jjtree) FunctionParameter */
        ASTFunctionParameter jjtn000 = new ASTFunctionParameter(JJTFUNCTIONPARAMETER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
        String id;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      t = jj_consume_token(VARIABLE_TYPE);
      id = MyID();
                jjtn000.setType(t.image);
                jjtn000.setName(id);
                jjtn000.genInter();

                if (curEnv.contains(id))
                        {if (true) throw new ParseException("Redifine: "+ id);}
                curEnv.put(id, new Type(t.image, false));
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNMENT_EQUAL_OPERATOR:
      case 42:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ASSIGNMENT_EQUAL_OPERATOR:
          jj_consume_token(ASSIGNMENT_EQUAL_OPERATOR);
          Expression();
          break;
        case 42:
          jj_consume_token(42);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case INTEGER_LITERAL:
            jj_consume_token(INTEGER_LITERAL);
            break;
          default:
            jj_la1[18] = jj_gen;
            ;
          }
          jj_consume_token(43);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGNMENT_EQUAL_OPERATOR:
            jj_consume_token(ASSIGNMENT_EQUAL_OPERATOR);
            jj_consume_token(44);
            ArrayInitializer();
            jj_consume_token(45);
            break;
          default:
            jj_la1[19] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** function body. */
  final public void FunctionBody() throws ParseException {
                       /*@bgen(jjtree) FunctionBody */
  ASTFunctionBody jjtn000 = new ASTFunctionBody(JJTFUNCTIONBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(44);
      BlockStatements();
      jj_consume_token(45);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** ************block*************** .*/

/** A block. */
  final public void Block() throws ParseException {
                /*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 44:
        jj_consume_token(44);
        BlockStatements();
        jj_consume_token(45);
        break;
      case IF:
      case FOR:
      case WHILE:
      case FOREACH:
      case BREAK:
      case CONTINUE:
      case RETURN:
      case VARIABLE_TYPE:
      case CONST:
      case IDENTIFIER:
      case 46:
      case 69:
      case 70:
        BlockStatement();
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** block statements. */
  final public void BlockStatements() throws ParseException {
                          /*@bgen(jjtree) BlockStatements */
  ASTBlockStatements jjtn000 = new ASTBlockStatements(JJTBLOCKSTATEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IF:
        case FOR:
        case WHILE:
        case FOREACH:
        case BREAK:
        case CONTINUE:
        case RETURN:
        case VARIABLE_TYPE:
        case CONST:
        case IDENTIFIER:
        case 46:
        case 69:
        case 70:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_6;
        }
        BlockStatement();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** block statement. */
  final public void BlockStatement() throws ParseException {
                         /*@bgen(jjtree) BlockStatement */
  ASTBlockStatement jjtn000 = new ASTBlockStatement(JJTBLOCKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_TYPE:
      case CONST:
        UniversalDeclarator();
        break;
      case IF:
      case FOR:
      case WHILE:
      case FOREACH:
      case BREAK:
      case CONTINUE:
      case RETURN:
      case IDENTIFIER:
      case 46:
      case 69:
      case 70:
        Statement();
        break;
      default:
        jj_la1[24] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** A statement. */
  final public void Statement() throws ParseException {
                    /*@bgen(jjtree) Statement */
  ASTStatement jjtn000 = new ASTStatement(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BREAK:
      case CONTINUE:
      case RETURN:
      case IDENTIFIER:
      case 46:
      case 69:
      case 70:
        SimpleStatement();
        break;
      case IF:
        IfStatement();
        break;
      case WHILE:
        WhileStatement();
        break;
      case FOR:
        ForStatement();
        break;
      case FOREACH:
        ForeachStatement();
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** statement without trailing substatement(simple statement). */
  final public void SimpleStatement() throws ParseException {
                          /*@bgen(jjtree) SimpleStatement */
  ASTSimpleStatement jjtn000 = new ASTSimpleStatement(JJTSIMPLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 46:
        EmptyStatement();
        break;
      default:
        jj_la1[26] = jj_gen;
        if (jj_2_3(10)) {
          PostIncDecExpression();
          jj_consume_token(46);
        } else if (jj_2_4(10)) {
          PreIncDecExpression();
          jj_consume_token(46);
        } else if (jj_2_5(10)) {
          AssignmentExpression();
          jj_consume_token(46);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case BREAK:
            BreakStatement();
            break;
          case CONTINUE:
            ContinueStatement();
            break;
          case RETURN:
            ReturnStatement();
            break;
          default:
            jj_la1[27] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** empty statement. */
  final public void EmptyStatement() throws ParseException {
                         /*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(46);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** if statement. */
  final public void IfStatement() throws ParseException {
 /*@bgen(jjtree) IfStatement */
        ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraR;
    try {
      jj_consume_token(IF);
      jj_consume_token(47);
      paraR = Expression();
      jj_consume_token(48);
                if (jjtn000.typeRight != Type.Bool)
                        {if (true) throw new ParseException("Error type of ifStatement: " + jjtn000.typeRight.name);}
                Env savedEnv = curEnv;
                curEnv = new Env(curEnv);
                jjtn000.genInter(0, paraR);
      Block();
                curEnv = savedEnv;
                jjtn000.genTailLabel();
      label_7:
      while (true) {
        if (jj_2_6(2)) {
          ;
        } else {
          break label_7;
        }
        jj_consume_token(ELSE);
        jj_consume_token(IF);
        jj_consume_token(47);
        Expression();
        jj_consume_token(48);
                        if (jjtn000.typeRight != Type.Bool)
                                {if (true) throw new ParseException("Error type of ifStatement: " + jjtn000.typeRight.name);}
                        savedEnv = curEnv;
                        curEnv = new Env(curEnv);
        Block();
                        curEnv = savedEnv;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELSE:
        jj_consume_token(ELSE);
                        savedEnv = curEnv;
                        curEnv = new Env(curEnv);
        Block();
                        curEnv = savedEnv;
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** A WhileStatement. */
  final public void WhileStatement() throws ParseException {
 /*@bgen(jjtree) WhileStatement */
        ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraR;
    try {
      jj_consume_token(WHILE);
                jjtn000.writeHeadLabel();
      jj_consume_token(47);
      paraR = Expression();
      jj_consume_token(48);
                if (jjtn000.typeRight != Type.Bool)
                        {if (true) throw new ParseException("Error type of whileStatement: " + jjtn000.typeRight.name);}
                Env savedEnv = curEnv;
                curEnv = new Env(curEnv);
                jjtn000.genInter(0, paraR);
      Block();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.writeTailLabel();
                curEnv = savedEnv;
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** for statement. */
  final public void ForStatement() throws ParseException {
 /*@bgen(jjtree) ForStatement */
        ASTForStatement jjtn000 = new ASTForStatement(JJTFORSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraL, paraR;
        String id;
    try {
      jj_consume_token(FOR);
                jjtn000.writeHeadLabel();
      jj_consume_token(47);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        break;
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      id = MyID();
      jj_consume_token(ASSIGNMENT_EQUAL_OPERATOR);
      paraL = Expression();
      jj_consume_token(TO);
      paraR = Expression();
      jj_consume_token(48);
                jjtn000.genInter(id, paraL, paraR);
      Block();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.writeTailLabel();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** foreach statement. */
  final public void ForeachStatement() throws ParseException {
                           /*@bgen(jjtree) ForeachStatement */
  ASTForeachStatement jjtn000 = new ASTForeachStatement(JJTFOREACHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOREACH);
      jj_consume_token(47);
      jj_consume_token(VARIABLE_TYPE);
      MyID();
      jj_consume_token(49);
      MyID();
      jj_consume_token(48);
      Block();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** break statement. */
  final public void BreakStatement() throws ParseException {
                         /*@bgen(jjtree) BreakStatement */
  ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BREAK);
      jj_consume_token(46);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** continue statement. */
  final public void ContinueStatement() throws ParseException {
                            /*@bgen(jjtree) ContinueStatement */
  ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(CONTINUE);
      jj_consume_token(46);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** return statement. */
  final public void ReturnStatement() throws ParseException {
 /*@bgen(jjtree) ReturnStatement */
        ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraL;
    try {
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case BOOLEAN_LITERAL:
      case CHARACTER_LITERAL:
      case IDENTIFIER:
      case 47:
      case 64:
      case 65:
      case 71:
      case 72:
        paraL = Expression();
                        jjtn000.genInter(paraL, 0);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(46);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** comment statement. */
  final public void CommentStatement() throws ParseException {
                           /*@bgen(jjtree) CommentStatement */
  ASTCommentStatement jjtn000 = new ASTCommentStatement(JJTCOMMENTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(46);
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** ************Expressions*************** .*/

/** An Expression. */
  final public int Expression() throws ParseException {
                   /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(5)) {
        AssignmentExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000.getPara();}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case INTEGER_LITERAL:
        case REAL_LITERAL:
        case BOOLEAN_LITERAL:
        case CHARACTER_LITERAL:
        case IDENTIFIER:
        case 47:
        case 64:
        case 65:
        case 71:
        case 72:
          ConditionalExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000.getPara();}
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** assignment expression. */
  final public int AssignmentExpression() throws ParseException {
 /*@bgen(jjtree) AssignmentExpression */
        ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);String lhs;
        Token op = null;
        int paraR;
    try {
      lhs = LeftSide();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNMENT_OPERATOR:
        op = jj_consume_token(ASSIGNMENT_OPERATOR);
        break;
      case ASSIGNMENT_EQUAL_OPERATOR:
        op = jj_consume_token(ASSIGNMENT_EQUAL_OPERATOR);
        break;
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      paraR = Expression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                Type type = curEnv.get(lhs);
                if (type == null)
                        {if (true) throw new ParseException("Undifine: "+ lhs);}
                if (type.isFunc)
                        {if (true) throw new ParseException("Invalid parameter: "+ lhs);}
                if ((type == Type.Bool) && (jjtn000.typeRight != Type.Bool))
                        {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ type.name + " " + jjtn000.typeRight.name);}
                if ((type != Type.Bool) && (jjtn000.typeRight == Type.Bool))
                        {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ type.name + " " + jjtn000.typeRight.name);}
                if ((type == Type.Char) && (jjtn000.typeRight == Type.Real))
                        {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ type.name + " " + jjtn000.typeRight.name);}
                if ((type == Type.Int) && (jjtn000.typeRight == Type.Real))
                        {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ type.name + " " + jjtn000.typeRight.name);}
                jjtn000.typeRight = type;
                jjtn000.setLeftSide(lhs);
                jjtn000.setOp(op.image);
                {if (true) return jjtn000.genInter(0, paraR);}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** conditional expression. */
  final public int ConditionalExpression() throws ParseException {
                               /*@bgen(jjtree) ConditionalExpression */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ConditionalOrExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 50:
        jj_consume_token(50);
        Expression();
        jj_consume_token(49);
        Expression();
        break;
      default:
        jj_la1[33] = jj_gen;
        ;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000.getPara();}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** conditional or expression. */
  final public int ConditionalOrExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalOrExpression */
        ASTConditionalOrExpression jjtn000 = new ASTConditionalOrExpression(JJTCONDITIONALOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraL, paraR;
        Type typeLeft;
    try {
      paraL = ConditionalAndExpression();
                typeLeft = jjtn000.typeRight;
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 51:
          ;
          break;
        default:
          jj_la1[34] = jj_gen;
          break label_8;
        }
        jj_consume_token(51);
        paraR = ConditionalAndExpression();
                        if ((typeLeft != Type.Bool) || (jjtn000.typeRight != Type.Bool))
                                {if (true) throw new ParseException("Error type of op: || / " + typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = Type.Bool;
                        paraL = jjtn000.genInter(paraL, paraR);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** conditional and expression. */
  final public int ConditionalAndExpression() throws ParseException {
 /*@bgen(jjtree) ConditionalAndExpression */
        ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(JJTCONDITIONALANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraL, paraR;
        Type typeLeft;
    try {
      paraL = InclusiveOrExpression();
                typeLeft = jjtn000.typeRight;
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 52:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_9;
        }
        jj_consume_token(52);
        paraR = InclusiveOrExpression();
                        if ((typeLeft != Type.Bool) || (jjtn000.typeRight != Type.Bool))
                                {if (true) throw new ParseException("Error type of op: && / " + typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = Type.Bool;
                        paraL =  jjtn000.genInter(paraL, paraR);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** inclusive or expression. */
  final public int InclusiveOrExpression() throws ParseException {
 /*@bgen(jjtree) InclusiveOrExpression */
        ASTInclusiveOrExpression jjtn000 = new ASTInclusiveOrExpression(JJTINCLUSIVEOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraL, paraR;
        Type typeLeft;
    try {
      paraL = ExclusiveOrExpression();
                typeLeft = jjtn000.typeRight;
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 53:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_10;
        }
        jj_consume_token(53);
        paraR = ExclusiveOrExpression();
                        if (typeLeft != Type.Int && typeLeft != Type.Char)
                                {if (true) throw new ParseException("Error type of op: | / " + typeLeft.name + " " + jjtn000.typeRight.name);}
                        if (jjtn000.typeRight != Type.Int && jjtn000.typeRight != Type.Char)
                                {if (true) throw new ParseException("Error type of op: | / " + typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = Type.max(typeLeft, jjtn000.typeRight);
                        paraL =  jjtn000.genInter(paraL, paraR);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** exclusive or expression. */
  final public int ExclusiveOrExpression() throws ParseException {
 /*@bgen(jjtree) ExclusiveOrExpression */
        ASTExclusiveOrExpression jjtn000 = new ASTExclusiveOrExpression(JJTEXCLUSIVEOREXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraL, paraR;
        Type typeLeft;
    try {
      paraL = AndExpression();
                typeLeft = jjtn000.typeRight;
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 54:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_11;
        }
        jj_consume_token(54);
        paraR = AndExpression();
                        if (typeLeft != Type.Int && typeLeft != Type.Char)
                                {if (true) throw new ParseException("Error type of op: ^ / " + typeLeft.name + " " + jjtn000.typeRight.name);}
                        if (jjtn000.typeRight != Type.Int && jjtn000.typeRight != Type.Char)
                                {if (true) throw new ParseException("Error type of op: ^ / " + typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = Type.max(typeLeft, jjtn000.typeRight);
                        paraL =  jjtn000.genInter(paraL, paraR);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** and expression. */
  final public int AndExpression() throws ParseException {
 /*@bgen(jjtree) AndExpression */
        ASTAndExpression jjtn000 = new ASTAndExpression(JJTANDEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraL, paraR;
        Type typeLeft;
    try {
      paraL = EqualityExpression();
                typeLeft = jjtn000.typeRight;
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 55:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_12;
        }
        jj_consume_token(55);
        paraR = EqualityExpression();
                        if (typeLeft != Type.Int && typeLeft != Type.Char)
                                {if (true) throw new ParseException("Error type of op: & / " + typeLeft.name + " " + jjtn000.typeRight.name);}
                        if (jjtn000.typeRight != Type.Int && jjtn000.typeRight != Type.Char)
                                {if (true) throw new ParseException("Error type of op: & / " + typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = Type.max(typeLeft, jjtn000.typeRight);
                        paraL =  jjtn000.genInter(paraL, paraR);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** equality expression. */
  final public int EqualityExpression() throws ParseException {
 /*@bgen(jjtree) EqualityExpression */
        ASTEqualityExpression jjtn000 = new ASTEqualityExpression(JJTEQUALITYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);int paraL, paraR;
        Token op = null;
        Type typeLeft;
    try {
      paraL = RelationalExpression();
                typeLeft = jjtn000.typeRight;
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 56:
        case 57:
          ;
          break;
        default:
          jj_la1[39] = jj_gen;
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 56:
          op = jj_consume_token(56);
          break;
        case 57:
          op = jj_consume_token(57);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        paraR = RelationalExpression();
                        if ((typeLeft == Type.Bool) && Type.numeric(jjtn000.typeRight))
                                {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ typeLeft.name + " " + jjtn000.typeRight.name);}
                        if ((jjtn000.typeRight == Type.Bool) && Type.numeric(typeLeft))
                                {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = Type.Bool;
                        jjtn000.setOp(op.image);
                        paraL =  jjtn000.genInter(paraL, paraR);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** relational expression. */
  final public int RelationalExpression() throws ParseException {
 /*@bgen(jjtree) RelationalExpression */
        ASTRelationalExpression jjtn000 = new ASTRelationalExpression(JJTRELATIONALEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
        int paraL, paraR;
        Type typeLeft;
    try {
      paraL = ShiftExpression();
                typeLeft = jjtn000.typeRight;
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
        case 59:
        case 60:
        case 61:
          ;
          break;
        default:
          jj_la1[41] = jj_gen;
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 58:
          op = jj_consume_token(58);
          break;
        case 59:
          op = jj_consume_token(59);
          break;
        case 60:
          op = jj_consume_token(60);
          break;
        case 61:
          op = jj_consume_token(61);
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        paraR = ShiftExpression();
                        if ((!Type.numeric(typeLeft)) || (!Type.numeric(jjtn000.typeRight)))
                                {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = Type.Bool;
                        jjtn000.setOp(op.image);
                        paraL =  jjtn000.genInter(paraL, paraR);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** shift expression. */
  final public int ShiftExpression() throws ParseException {
 /*@bgen(jjtree) ShiftExpression */
        ASTShiftExpression jjtn000 = new ASTShiftExpression(JJTSHIFTEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
        int paraL, paraR;
        Type typeLeft;
    try {
      paraL = AdditiveExpression();
                typeLeft = jjtn000.typeRight;
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 62:
        case 63:
          ;
          break;
        default:
          jj_la1[43] = jj_gen;
          break label_15;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 62:
          op = jj_consume_token(62);
          break;
        case 63:
          op = jj_consume_token(63);
          break;
        default:
          jj_la1[44] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        paraR = AdditiveExpression();
                        if (typeLeft != Type.Int && typeLeft != Type.Char)
                                {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ typeLeft.name + " " + jjtn000.typeRight.name);}
                        if (jjtn000.typeRight != Type.Int && jjtn000.typeRight != Type.Char)
                                {if (true) throw new ParseException("Error type of op: " + op.image + " / "+ typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = Type.Int;
                        jjtn000.setOp(op.image);
                        paraL =  jjtn000.genInter(paraL, paraR);
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** additive expression. */
  final public int AdditiveExpression() throws ParseException {
 /*@bgen(jjtree) AdditiveExpression */
        ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(JJTADDITIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
        int paraL, paraR;
        Type typeLeft, temp;
    try {
      paraL = MultiplicativeExpression();
                typeLeft = jjtn000.typeRight;
      label_16:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 64:
        case 65:
          ;
          break;
        default:
          jj_la1[45] = jj_gen;
          break label_16;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 64:
          op = jj_consume_token(64);
          break;
        case 65:
          op = jj_consume_token(65);
          break;
        default:
          jj_la1[46] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        paraR = MultiplicativeExpression();
                        jjtn000.setOp(op.image);
                        paraL =  jjtn000.genInter(paraL, paraR);
                        temp = Type.max(typeLeft, jjtn000.typeRight);
                        if (temp == null)
                                {if (true) throw new ParseException("Unmatched type: "+ typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = temp;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** multiplicative expression. */
  final public int MultiplicativeExpression() throws ParseException {
 /*@bgen(jjtree) MultiplicativeExpression */
        ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(JJTMULTIPLICATIVEEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
        int paraL, paraR;
        Type typeLeft, temp;
    try {
      paraL = UnaryExpression();
                typeLeft = jjtn000.typeRight;
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
        case 67:
        case 68:
          ;
          break;
        default:
          jj_la1[47] = jj_gen;
          break label_17;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
          op = jj_consume_token(66);
          break;
        case 67:
          op = jj_consume_token(67);
          break;
        case 68:
          op = jj_consume_token(68);
          break;
        default:
          jj_la1[48] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        paraR = UnaryExpression();
                        jjtn000.setOp(op.image);
                        paraL = jjtn000.genInter(paraL, paraR);
                        temp = Type.max(typeLeft, jjtn000.typeRight);
                        if (temp == null)
                                {if (true) throw new ParseException("Unmatched type: "+ typeLeft.name + " " + jjtn000.typeRight.name);}
                        typeLeft = temp;
      }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.typeRight = typeLeft;
                {if (true) return paraL;}
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** unary expression. */
  final public int UnaryExpression() throws ParseException {
 /*@bgen(jjtree) UnaryExpression */
        ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
        int paraR;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case BOOLEAN_LITERAL:
      case CHARACTER_LITERAL:
      case IDENTIFIER:
      case 47:
      case 71:
      case 72:
        SimpleUnaryExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000.getPara();}
        break;
      case 64:
        op = jj_consume_token(64);
        paraR = UnaryExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (!Type.numeric(jjtn000.typeRight))
                        {if (true) throw new ParseException("Error type of op: +  / " +  jjtn000.typeRight.name);}
                jjtn000.setOp(op.image);
                {if (true) return jjtn000.genInter(0, paraR);}
        break;
      case 65:
        op = jj_consume_token(65);
        paraR = UnaryExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (!Type.numeric(jjtn000.typeRight))
                        {if (true) throw new ParseException("Error type of op: -  / " + jjtn000.typeRight.name);}
                jjtn000.setOp(op.image);
                {if (true) return jjtn000.genInter(0, paraR);}
        break;
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** PreIncDecExpression. */
  final public void PreIncDecExpression() throws ParseException {
                              /*@bgen(jjtree) PreIncDecExpression */
  ASTPreIncDecExpression jjtn000 = new ASTPreIncDecExpression(JJTPREINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        jj_consume_token(69);
        break;
      case 70:
        jj_consume_token(70);
        break;
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      LeftSide();
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** PostIncDecExpression. */
  final public void PostIncDecExpression() throws ParseException {
                               /*@bgen(jjtree) PostIncDecExpression */
  ASTPostIncDecExpression jjtn000 = new ASTPostIncDecExpression(JJTPOSTINCDECEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      LeftSide();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 69:
        jj_consume_token(69);
        break;
      case 70:
        jj_consume_token(70);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** unary expression not plus minus(simpleUnaryExpression). */
  final public int SimpleUnaryExpression() throws ParseException {
 /*@bgen(jjtree) SimpleUnaryExpression */
        ASTSimpleUnaryExpression jjtn000 = new ASTSimpleUnaryExpression(JJTSIMPLEUNARYEXPRESSION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token op = null;
        int paraR;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case BOOLEAN_LITERAL:
      case CHARACTER_LITERAL:
      case IDENTIFIER:
      case 47:
        Primary();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                {if (true) return jjtn000.getPara();}
        break;
      case 71:
        op = jj_consume_token(71);
        paraR = UnaryExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (jjtn000.typeRight != Type.Int && jjtn000.typeRight != Type.Char)
                        {if (true) throw new ParseException("Error type of op: ~ / " + jjtn000.typeRight.name);}
                jjtn000.setOp(op.image);
                {if (true) return jjtn000.genInter(0, paraR);}
        break;
      case 72:
        op = jj_consume_token(72);
        paraR = UnaryExpression();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                if (Type.numeric(jjtn000.typeRight))
                        {if (true) throw new ParseException("Error type of op: ! / " + jjtn000.typeRight.name);}
                jjtn000.setOp(op.image);
                {if (true) return jjtn000.genInter(0, paraR);}
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** primary. */
  final public int Primary() throws ParseException {
 /*@bgen(jjtree) Primary */
        ASTPrimary jjtn000 = new ASTPrimary(JJTPRIMARY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t1;
        String lhs;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
        t1 = jj_consume_token(INTEGER_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(t1.image);
                jjtn000.typeRight = Type.Int;
                {if (true) return jjtn000.genInter();}
        break;
      case REAL_LITERAL:
        t1 = jj_consume_token(REAL_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(t1.image);
                jjtn000.typeRight = Type.Real;
                {if (true) return jjtn000.genInter();}
        break;
      case BOOLEAN_LITERAL:
        t1 = jj_consume_token(BOOLEAN_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(t1.image);
                jjtn000.typeRight = Type.Bool;
                {if (true) return jjtn000.genInter();}
        break;
      case CHARACTER_LITERAL:
        t1 = jj_consume_token(CHARACTER_LITERAL);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(t1.image);
                jjtn000.typeRight = Type.Char;
                {if (true) return jjtn000.genInter();}
        break;
      case IDENTIFIER:
        lhs = LeftSide();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 47:
          FunctionInvoke();
          break;
        default:
          jj_la1[53] = jj_gen;
          ;
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                Type type = curEnv.get(lhs);
                if (type == null)
                        {if (true) throw new ParseException("Undifine: "+ lhs);}
                if (type.isFunc)
                        {if (true) throw new ParseException("Invalid parameter: "+ lhs);}
                jjtn000.typeRight = type;
                jjtn000.setName(lhs);
                {if (true) return jjtn000.genInter();}
        break;
      case 47:
        jj_consume_token(47);
        Primary2();
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** FunctionInvoke. */
  final public void FunctionInvoke() throws ParseException {
                         /*@bgen(jjtree) FunctionInvoke */
  ASTFunctionInvoke jjtn000 = new ASTFunctionInvoke(JJTFUNCTIONINVOKE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(47);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case BOOLEAN_LITERAL:
      case CHARACTER_LITERAL:
      case IDENTIFIER:
      case 47:
      case 64:
      case 65:
      case 71:
      case 72:
        Expression();
        label_18:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 41:
            ;
            break;
          default:
            jj_la1[55] = jj_gen;
            break label_18;
          }
          jj_consume_token(41);
          Expression();
        }
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(48);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** primary2. */
  final public void Primary2() throws ParseException {
                   /*@bgen(jjtree) Primary2 */
  ASTPrimary2 jjtn000 = new ASTPrimary2(JJTPRIMARY2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case REAL_LITERAL:
      case BOOLEAN_LITERAL:
      case CHARACTER_LITERAL:
      case IDENTIFIER:
      case 47:
      case 64:
      case 65:
      case 71:
      case 72:
        Expression();
        jj_consume_token(48);
        break;
      case VARIABLE_TYPE:
        jj_consume_token(VARIABLE_TYPE);
        jj_consume_token(48);
        SimpleUnaryExpression();
        break;
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

/** left side. */
  final public String LeftSide() throws ParseException {
 /*@bgen(jjtree) LeftSide */
        ASTLeftSide jjtn000 = new ASTLeftSide(JJTLEFTSIDE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t1;
        Token t2;
    try {
      t1 = jj_consume_token(IDENTIFIER);
                jjtn000.setName(t1.image);
                {if (true) return t1.image;}
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 42:
      case 73:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
          jj_consume_token(73);
          t2 = jj_consume_token(IDENTIFIER);
                        jjtn000.setName(t1.image + "." + t2.image);
          break;
        case 42:
          jj_consume_token(42);
          Expression();
          jj_consume_token(43);
          break;
        default:
          jj_la1[58] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

/** An Identifier. */
  final public String MyID() throws ParseException {
 /*@bgen(jjtree) MyID */
        ASTMyID jjtn000 = new ASTMyID(JJTMYID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
                jjtn000.setName(t.image);
                {if (true) return t.image;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(73)) return true;
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_3R_48()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) {
    jj_scanpos = xsp;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_3R_54()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(55)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_3R_40()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(VARIABLE_TYPE)) return true;
    if (jj_scan_token(48)) return true;
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) return true;
    }
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_28()) return true;
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_78()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(47)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(65)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(49)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(47)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_53()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(41)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_scan_token(42)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(CHARACTER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) return true;
    }
    }
    }
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(ASSIGNMENT_EQUAL_OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_36()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_44()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) return true;
    }
    }
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_scan_token(REAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_23()) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) return true;
    }
    if (jj_3R_24()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) {
    jj_scanpos = xsp;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_3R_27()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) jj_scanpos = xsp;
    if (jj_scan_token(VARIABLE_TYPE)) return true;
    if (jj_3R_24()) return true;
    xsp = jj_scanpos;
    if (jj_3R_25()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_26()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(46)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_3R_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_43()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_28()) return true;
    if (jj_scan_token(43)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    if (jj_3R_54()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public Eg2TokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0x868000,0x0,0x40000,0x1000000,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x0,0x60000,0x820000,0x60000,0x0,0x40000,0x1000000,0x0,0x0,0x0,0x77a80,0x77a80,0x77a80,0x17a80,0x0,0x16000,0x100,0x20000,0x17000000,0x17000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17000000,0x0,0x0,0x17000000,0x0,0x17000000,0x0,0x17000000,0x17020000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x200,0x0,0x0,0x80,0x480,0x480,0x200,0x0,0x80,0x480,0x480,0x0,0x0,0x0,0x200,0x0,0x0,0x80,0x480,0x480,0x5020,0x4020,0x4020,0x4020,0x4000,0x0,0x0,0x0,0x8020,0x8020,0x180,0x40000,0x80000,0x100000,0x200000,0x400000,0x800000,0x3000000,0x3000000,0x3c000000,0x3c000000,0xc0000000,0xc0000000,0x0,0x0,0x0,0x0,0x8020,0x0,0x0,0x8020,0x8000,0x8020,0x200,0x8020,0x8020,0x400,0x400,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60,0x60,0x60,0x60,0x0,0x0,0x0,0x0,0x183,0x183,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x3,0x1c,0x1c,0x183,0x60,0x60,0x180,0x0,0x0,0x0,0x183,0x183,0x200,0x200,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[7];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Eg2(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Eg2(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Eg2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Eg2(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new Eg2TokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Eg2(Eg2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Eg2TokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[74];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
